

# ü§û Analysis of chats on WhatsApp. üôÑ

#### Norma Cala üíÉ
#### Fecha: 16-10-2020


## üìó Librer√≠as. 
```{r}
library(rwhatsapp)
library(lubridate)
library(tidyverse)
library(tidytext)
library(kableExtra)
library(RColorBrewer)
library(knitr)
```

## üìö Cargue de datos.

```{r}
miChat = rwa_read("Chat_WhatsApp_Sister.txt")
```

# üìÖ Seg√∫n fechas segmentamos por semestres.

```{r}
miChat <- miChat %>% 
mutate(day = date(time)) %>% 
mutate(
# SEGMENTACI√ìN POR SEMESTRE
semestre = case_when(
day >= ymd(20160101) & day <= ymd(20160630) ~ "Primero de 2016",
day >= ymd(20160701) & day <= ymd(20161231) ~ "Segundo de 2016",
day >= ymd(20170101) & day <= ymd(20170630) ~ "Primero de 2017",
day >= ymd(20170701) & day <= ymd(20171231) ~ "Segundo de 2017",
day >= ymd(20180101) & day <= ymd(20180630) ~ "Primero de 2018",
day >= ymd(20180701) & day <= ymd(20181231) ~ "Segundo de 2018",
day >= ymd(20190101) & day <= ymd(20190630) ~ "Primero de 2019",
day >= ymd(20190701) & day <= ymd(20191231) ~ "Segundo de 2019",
day >= ymd(20200101) & day <= ymd(20200630) ~ "Primero de 2020",
day >= ymd(20200701) & day <= ymd(20201231) ~ "Segundo de 2020",
T ~ "Fuera de rango")
) %>% 
mutate( semestre = factor(semestre) ) %>% 
filter(!is.na(author))

```


# üìâ Frecuencias de mensajes di√°rios.

```{r}
# PALETA DE COLORES
paleta.semestres <- brewer.pal(8,"Set1")[c(7,5,1,3,4,2,6,8)]# VERIFICANDO CU√ÅNTOS MENSAJES SE ENVIARON DURANTE EL PERIODO DE TIEMPO
miChat %>% 
  group_by(semestre) %>% 
  count(day) %>%
  ggplot(aes(x = day, y = n, fill=semestre)) +
  geom_bar(stat = "identity") +
  scale_fill_manual(values=paleta.semestres) +
  ylab("N√∫mero de mensajes") + xlab("Fecha") +
  ggtitle("Mensajes por d√≠a", "Frecuencia por semestre del a√±o") +
  theme_minimal() +
  theme( legend.title = element_blank(), legend.position = "right")
```

# üìà Frecuencia de mensajes por d√≠a de la semana

```{r}
# MENSAJES POR D√çA DE LA SEMANA
miChat %>% 
mutate( wday.num = wday(day),
wday.name = weekdays(day)) %>% 
group_by(semestre, wday.num, wday.name) %>% 
count() %>% 
ggplot(aes(x = reorder(wday.name, -wday.num), y = n, fill=semestre)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=paleta.semestres) +
ylab("") + xlab("") +
coord_flip() +
ggtitle("N√∫mero de mensajes por d√≠a de la semana", "Frecuencia por semestre del a√±o") +
theme_minimal() +
theme( legend.title = element_blank(), legend.position = "right")
```

# ‚è∞ Frecuencia de mensajes por hora del d√≠a

```{r}
diasemana <- c("domingo","lunes","martes","mi√©rcoles","jueves","viernes","s√°bado","domingo")
names(diasemana) <- 1:7# MENSAJES POR HORA DEL D√çA
miChat %>% 
mutate( hour = hour(time), 
wday.num = wday(day),
wday.name = weekdays(day)) %>% 
count(semestre, wday.num, wday.name, hour) %>% 
ggplot(aes(x = hour, y = n, fill=semestre)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=paleta.semestres) +
ylab("N√∫mero de mensajes") + xlab("Horario") +
ggtitle("N√∫mero de mensajes por hora del d√≠a", "Frecuencia seg√∫n semestre del a√±o") +
facet_wrap(~wday.num, ncol=7, labeller = labeller(wday.num=diasemana))+
theme_minimal() +
coord_flip() +
theme( legend.title = element_blank(), 
legend.position = "right",
panel.spacing.x=unit(0.0, "lines"))
```
# üõ† ¬øAgrupaci√≥n para cantidad de mensajes por usuario?

```{r}
# Nombre de los usuarios del chat o sus alias.
miChat <- miChat %>%
  mutate(author = case_when(author == "NY Cala" ~ "Yotas", author != "NY Cala" ~ "Hermana"))
glimpse(miChat)
```

# üåÑ Graficando el total de mensajes.

```{r}
miChat %>%
mutate(day = date(time)) %>%
group_by(semestre) %>% 
count(author) %>% 
ggplot(aes(x = reorder(author, n), y = n, fill=semestre)) +
geom_bar(stat = "identity") +
scale_fill_manual(values=paleta.semestres) +
ylab("N√∫mero total de mensajes") + xlab("Usuario") +
coord_flip() +
ggtitle("N√∫mero total de mensajes por usuario.", "¬øQui√©n es m√°s comunicativo? Frecuencia por estaci√≥n del a√±o") +
theme_minimal() +
theme( legend.title = element_blank(),     legend.position = "right")
```
```{r}
library(ggimage)
```


```{r}
# LIBRER√çA PARA FETCH DE IMAGEN PNG DE EMOJI DESDE https://abs.twimg.com
library(ggimage)# EMOJI RANKING
plotEmojis <- miChat %>% 
 unnest(emoji, emoji_name) %>% 
 mutate( emoji = str_sub(emoji, end = 1)) %>% 
 mutate( emoji_name = str_remove(emoji_name, ":.*")) %>% 
 count(emoji, emoji_name) %>% 
 
# PLOT TOP 30 EMOJIS
 top_n(30, n) %>% 
 arrange(desc(n)) %>% # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
 mutate( emoji_url = map_chr(emoji, 
 ~paste0( "https://abs.twimg.com/emoji/v2/72x72/", as.hexmode(utf8ToInt(.x)),".png")) 
 )# PLOT DEL RANKING DE EMOJIS M√ÅS USADOS
```


# üëÅ Visualizaremos los emojis.

```{r}
plotEmojis %>% 
 ggplot(aes(x=reorder(emoji_name, n), y=n)) +
 geom_col(aes(fill=n), show.legend = FALSE, width = .2) +
 geom_point(aes(color=n), show.legend = FALSE, size = 3) +
 geom_image(aes(image=emoji_url), size=.045) +
 scale_fill_gradient(low="#2b83ba",high="#d7191c") +
 scale_color_gradient(low="#2b83ba",high="#d7191c") +
 ylab("N√∫mero de veces que el emoji fue usado") +
 xlab("Emoji y significado") +
 ggtitle("Emojis m√°s utilizados de manera general", "Emojis m√°s usados por todos") +
 coord_flip() +
 theme_minimal() +
 theme()
```

# üßç‚Äç‚ôÄÔ∏è Emojis m√°s utilizados por usuario.


```{r}
# EMOJI RANK POR USUARIO
plotEmojis <- miChat %>%
 unnest(emoji, emoji_name) %>%
 mutate( emoji = str_sub(emoji, end = 1)) %>% # 
 count(author, emoji, emoji_name, sort = TRUE) %>%# PLOT DEL TOP 8 EMOJIS POR USUARIO
 group_by(author) %>%
 top_n(n = 8, n) %>%
 slice(1:8) %>% 
 # CREA UNA URL DE IMAGEN CON EL UNICODE DE EMOJI
 mutate( emoji_url = map_chr(emoji, 
 ~paste0("https://abs.twimg.com/emoji/v2/72x72/",as.hexmode(utf8ToInt(.x)),".png")) )# PLOT DE LA DATA
```


```{r}
plotEmojis %>% 
 ggplot(aes(x = reorder(emoji, -n), y = n)) +
 geom_col(aes(fill = author, group=author), show.legend = FALSE, width = .20) +# USAR PARA HACER FETCH DE UNA IMAGEN PNG DE EMOJI https://abs.twimg.com
 geom_image(aes(image=emoji_url), size=.13) +
 ylab("N√∫mero de veces que se us√≥ el emoji") +
 xlab("Emoji") +
 facet_wrap(~author, ncol = 5, scales = "free") +
 ggtitle("Emojis m√°s usados en la conversaci√≥n, por usuario") +
 theme_minimal() +
 theme(axis.text.x = element_blank())
```
```{r}
library(tidytext)
library(stopwords) # REMOVEMOS PALABRAS SIN SIGNIFICADO RELEVANTE, COMO ART√çCULOS, PRONOMBRES, ETC.
```

# Remover palabras selecionadas
```{r}
remover_palabras <- c(stopwords(language = "pt"), "m", "the", "11", "1", "p", "20", "10", "05", "19", "5", "2", "to", "6", "c", "3", "7", "4", "00", "12", "18", "17", "03", "04", "f", "8", "x", "09", "50", "multimedia", "y", "la", "el", "en", "es", "si", "lo", "ya", "pero", "esa", "los", "yo", "mi", "un", "con", "las", "omitido", "m√°s", "eso", "al", "una", "del", "qu√©", "todo", "as√≠", "le", "su", "va", "porque", "todos", "hay", "les", "pue", "ese", "son", "est√°", "pues", "ah√≠", "s√≠", "ver", "est√°s", "algo", "vas", "ir", "voy", "creo", "fue", "solo", "ni", "s√≥lo", "nada", "aqui", "q", "t√∫")
```

# üôã Graficar, palabras m√°s utilizadas en el chat.

```{r}
miChat %>%
 unnest_tokens(input = text, output = word) %>%
 filter(!word %in% remover_palabras) %>% 
 count(word) %>% # PLOT DEL TOP 30 DE PALABRAS M√ÅS USADAS EN CONVERSACI√ìN
 top_n(30,n) %>% 
 arrange(desc(n)) %>% 
 ggplot(aes(x=reorder(word,n), y=n, fill=n, color=n)) +
 geom_col(show.legend = FALSE, width = .1) +
 geom_point(show.legend = FALSE, size = 3) +
 scale_fill_gradient(low="#2b83ba",high="#d7191c") +
 scale_color_gradient(low="#2b83ba",high="#d7191c") +
 ggtitle("Palabras m√°s usadas en la conversaci√≥n de manera general") +
 xlab("Palabras") +
 ylab("N√∫mero de veces que se us√≥ la palabra") +
 coord_flip() +
 theme_minimal()
```


# üôã Graficamos, las palabras m√°s utilizadas por usuario.

```{r}
miChat %>%
 unnest_tokens(input = text,
 output = word) %>%
 filter(!word %in% remover_palabras) %>%
 count(author, word, sort = TRUE) %>%
# TOP 20 PALABRAS M√ÅS USADAS POR USUARIO
 group_by(author) %>%
 top_n(n = 20, n) %>%
 slice(1:20) %>%
 ungroup() %>% 
 arrange(author, desc(n)) %>% 
 mutate(order=row_number()) %>% 
 ggplot(aes(x = reorder(word, n), y = n, fill = author, color = author)) +
 geom_col(show.legend = FALSE, width = .1) +
 geom_point(show.legend = FALSE, size = 3) +
 xlab("Palabras") +
 ylab("N√∫mero de veces que se us√≥ la palabra") +
 coord_flip() +
 facet_wrap(~author, ncol = 3, scales = "free") +
 ggtitle("Palabras m√°s usadas por usuario en la conversaci√≥n") +
 theme_minimal()
```


# üôã Ahora analizaremos el bocavulario m√°s diverso en la conversaci√≥n.

```{r}
#Qui√©n tiene el l√©xico m√°s diverso?
miChat %>%
  unnest_tokens(input = text,
                output = word) %>%
  filter(!word %in% remover_palabras) %>%
  group_by(author) %>%
  summarise(lex_diversity = n_distinct(word)) %>%
  arrange(desc(lex_diversity)) %>%
  ggplot(aes(x = reorder(author, lex_diversity),
             y = lex_diversity,
             fill = author)) +
  geom_col(show.legend = FALSE) +
  scale_y_continuous(expand = (mult = c(0, 0, 0, 500))) +
  geom_text(aes(label = scales::comma(lex_diversity)), hjust = -0.1) +
  ylab("Diversidad l√©xica") +
  xlab("Usuario") +
  ggtitle("Diversidad de l√©xico en la conversaci√≥n") +
  coord_flip()
```

# üôã Palabras √∫nicas por usuario.

```{r}
palabras_unicas_ella <- miChat %>%
  unnest_tokens(input = text,
                output = word) %>%
  filter(!word %in% remover_palabras, author != "Yotas") %>%  
  count(word, sort = TRUE)

miChat %>%
  unnest_tokens(input = text,
                output = word) %>%
  filter(!word %in% remover_palabras, author == "Yotas") %>% 
  count(word, sort = TRUE) %>% 
  filter(!word %in% palabras_unicas_ella$word) %>% 
  
# SELECCIONAR S√ìLO PALABRAS QUE NADIE M√ÅS USA
  top_n(n = 15, n) %>%
  ggplot(aes(x = reorder(word, n), y = n)) +
  geom_col(show.legend = FALSE) +
  ylab("N√∫mero de veces que se us√≥ la palabra") + xlab("Palabras") +
  coord_flip() +
  ggtitle("Top de palabras √∫nicas usadas por Mi")

```


# An√°lisis de sentimientos con Emoji Sentiment Ranking

```{r}
library(rvest)
library(purrr)
```

# P√°gina de emojis que utilizaremos.

```{r}
url_base <- "http://kt.ijs.si/data/Emoji_sentiment_ranking/index.html"
doc <- read_html(url_base)# BUSCAR TABLA DE EMOJI Y PROCESO
tabla_emojis <- doc %>% 
  html_node("#myTable") %>% 
  html_table() %>% 
  as_tibble()

# Obtener puntaje.
sentimiento_emoji <- tabla_emojis %>% 
  select(1,6:9) %>% 
  set_names("char", "negativo","neutral","positivo","sent.score")

# Extraer emoji y analizar
emoji_chat <- miChat %>% 
  unnest(c(emoji, emoji_name)) %>% 
  mutate( emoji = str_sub(emoji, end = 1)) %>% 
  inner_join(sentimiento_emoji, by=c("emoji"="char"))
```


# Visualizando los emojis.

```{r}
emoji_chat %>% 
  select(-source, -day, -semestre) %>%
  slice(c(1,n())) %>% 
  kable() %>% 
  kable_styling(font_size = 10)
```

```{r}
# OCURRENCIAS DE SENTIMIENTOS POR EMOJIS, POR USUARIO
emoji_sentimiento_usuarios <- emoji_chat %>% 
  group_by(author) %>% 
  summarise(
    positivo=mean(positivo),
    negativo=mean(negativo),
    neutral=mean(neutral),
    balance=mean(sent.score)
  ) %>% 
  arrange(desc(balance))

# FORMATO DE DATOS PARA REALIZAR PLOT
emoji_sentimiento_usuarios %>% 
  mutate( negativo  = -negativo,
          neutral.positivo =  neutral/2,
          neutral.negativo = -neutral/2) %>% 
  select(-neutral) %>% 
  gather("sentiment","mean", -author, -balance) %>% 
  mutate(sentiment = factor(sentiment, levels = c("negativo", "neutral.negativo", "positivo", "neutral.positivo"), ordered = T)) %>% 
  ggplot(aes(x=reorder(author,balance), y=mean, fill=sentiment)) +
  geom_bar(position="stack", stat="identity", show.legend = F, width = .5) +
  scale_fill_manual(values = brewer.pal(4,"RdYlGn")[c(1,2,4,2)]) +
  ylab(" - Negativo / Neutral / Positivo +") + xlab("Usuario") +
  ggtitle("An√°lisis de sentimientos por usuario","Basado en el puntaje promedio de sentimientos por emojis") +
  coord_flip() +
  theme_minimal()
```




